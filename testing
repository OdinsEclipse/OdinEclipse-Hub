local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "OdinsEclipse " .. Fluent.Version,
    TabWidth = 180,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Eggs = Window:AddTab({ Title = "Secret", Icon = "egg" }),
}

-- Store egg names
local eggList = {}
local chosenEgg = ""
local isAutoHatching = false
local eggData = require(game:GetService("ReplicatedStorage").Data.EggData)

-- Get valid egg names
local function getEggNames()
    eggList = {}
    local eggInfo = require(game:GetService("ReplicatedStorage").Data.EggData)

    for name, _ in pairs(eggInfo) do
        if not (name:find("Limited") or name:find("Event") or name:find("MusicalDragon") or 
                name:find("100x") or name:find("Sour") or name:find("Gem") or name:find("Cyberpunk")) then
            if name:sub(-3) == "Egg" then
                name = name:sub(1, -4)
            end
            table.insert(eggList, name)
        end
    end

    table.sort(eggList) -- Sort alphabetically
end

-- Initialize egg list
getEggNames()

-- Function to trigger egg purchase
local function hatchEgg()
    local eggService = game:GetService("ReplicatedStorage"):FindFirstChild("Packages")
        and game:GetService("ReplicatedStorage").Packages:FindFirstChild("Knit")
        and game:GetService("ReplicatedStorage").Packages.Knit.Services
        and game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService
        and game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF
        and game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg

    if eggService then
        local args = {chosenEgg, nil, nil, false, nil, true} -- Only using max hatch
        eggService:InvokeServer(unpack(args))
    end
end

-- Start auto-hatching
local function autoHatch()
    spawn(function()
        while isAutoHatching do
            hatchEgg()
            wait(0.2) -- Prevents instant spamming
        end
    end)
end

-- Toggle auto-hatch function
local function toggleHatch(state)
    isAutoHatching = state
    if isAutoHatching then
        autoHatch()
    end
end

-- Dropdown to select an egg
Tabs.Eggs:AddDropdown("EggSelector", {
    Title = "Choose an Egg",
    Values = eggList,
    Default = chosenEgg,
    Search = true,
    Callback = function(value)
        chosenEgg = value
    end
})

-- Toggle for automatic hatching
Tabs.Eggs:AddToggle("AutoHatch", {
    Title = "Auto Hatch (Max Mode)",
    Default = false,
    Callback = function(state)
        toggleHatch(state)
    end
})
